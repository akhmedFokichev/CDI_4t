const int hallSensor = 2;  
const int ignitionPin = 9;
const int logTimeDelay = 1000;
const int com3Speed = 9600;

volatile unsigned long lastPulseTime = 0;
volatile unsigned long rpm = 0;
volatile unsigned long delayIgnition = 0;

// üîπ –£–∫–∞–∑—ã–≤–∞–µ–º —É–≥–æ–ª —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞—Ç—á–∏–∫–∞ (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å!)
const int startAngle = 40;  // –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–∞—Ç—á–∏–∫ —Å—Ç–æ–∏—Ç –Ω–∞ 40¬∞ –¥–æ –í–ú–¢

void setup() {
  pinMode(hallSensor, INPUT_PULLUP);
  pinMode(ignitionPin, OUTPUT);
  Serial.begin(com3Speed);

  attachInterrupt(digitalPinToInterrupt(hallSensor), fireIgnition, FALLING);
}

void loop() {
  static unsigned long lastPrintTime = 0;

  if (millis() - lastPrintTime >= logTimeDelay) {
    lastPrintTime = millis();
    Serial.print("RPM: ");
    Serial.print(rpm);
    Serial.print(" | –£–û–ó: ");
    Serial.print(getAdvanceAngle(rpm));
    Serial.print(" | –ó–∞–¥–µ—Ä–∂–∫–∞: ");
    Serial.println(delayIgnition);
  }
}

void spark_old() {
  // –ü–æ–¥–∞—ë–º –∏—Å–∫—Ä—É
  digitalWrite(ignitionPin, HIGH);
  delay(100);
  digitalWrite(ignitionPin, LOW);
}

void fireIgnition() {
  // –í—ã—á–∏—Å–ª—è–µ–º RPM
  calcRPM();

  // –ü–æ–ª—É—á–∞–µ–º —É–≥–æ–ª –æ–ø–µ—Ä–µ–∂–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç RPM
  int ignitionAdvance = getAdvanceAngle(rpm);

  // –ü–æ–ª—É—á–∞–µ–º delay –¥—è–ª –∏—Å–∫—Ä—ã
  delayIgnition = calcDelayIgnition(ignitionAdvance);

  // –ñ–¥—ë–º –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ –∏—Å–∫—Ä–æ–π
  delayMicroseconds(delayIgnition); 

  // –∏—Å–∫—Ä–∞
  spark();
}

void spark() {
  digitalWrite(ignitionPin, HIGH);
  delayMicroseconds(5000);
  digitalWrite(ignitionPin, LOW);
}

  // üîπ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º RPM
void calcRPM() {
  unsigned long currentTime = micros();
  unsigned long pulseInterval = currentTime - lastPulseTime;

  if (pulseInterval > 0) {
    rpm = 60000000 / pulseInterval;  // –í—ã—á–∏—Å–ª—è–µ–º RPM
  }
  lastPulseTime = currentTime;
}

  // üîπ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –∏—Å–∫—Ä–æ–π —Å —É—á—ë—Ç–æ–º —É–≥–ª–∞ –¥–∞—Ç—á–∏–∫–∞
unsigned long calcDelayIgnition(int ignitionAdvance) {
  int effectiveAdvance = startAngle - ignitionAdvance;  
  if (effectiveAdvance < 0) effectiveAdvance = 0; // –ò—Å–∫—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –í–ú–¢
  delayIgnition = (effectiveAdvance * 1000000) / (rpm * 6); // –ü–µ—Ä–µ–≤–æ–¥ –≥—Ä–∞–¥—É—Å–æ–≤ –≤ –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã
  return delayIgnition;
}

// üîπ –§—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —É–≥–ª–∞ –æ–ø–µ—Ä–µ–∂–µ–Ω–∏—è –∑–∞–∂–∏–≥–∞–Ω–∏—è (–ø–æ–¥–±–∏—Ä–∞–µ–º –ø–æ–¥ –º–æ—Ç–æ—Ä)
int getAdvanceAngle(unsigned long rpm) {
  if (rpm < 1000) return map(rpm, 0, 1000, 5, 10);
  if (rpm < 2000) return map(rpm, 1000, 2000, 10, 15);
  if (rpm < 3000) return map(rpm, 2000, 3000, 15, 20);
  if (rpm < 4000) return map(rpm, 3000, 4000, 20, 25);
  if (rpm < 5000) return map(rpm, 4000, 5000, 25, 27);
  if (rpm < 6000) return map(rpm, 5000, 6000, 27, 30);
  if (rpm < 7000) return map(rpm, 6000, 7000, 30, 33);
  if (rpm < 8000) return map(rpm, 7000, 8000, 33, 35);
  if (rpm < 9000) return map(rpm, 8000, 9000, 35, 38);
  
  return 38; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
}
